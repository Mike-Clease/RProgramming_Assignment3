#Heading
##Secondary Heading
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
install.packages("installr")
require(installr)
updateR()
find./package("devtools")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages(KernSnooth)
install.packages(KernSmooth)
install.packages("KernSnooth")
cd
setwd(c:\users\mike\)
setwd("c:\users\mike\")
setwd("c:/users/mike/")
getwd()
ls()
setwd("datasciencecoursera")
source("HelloWorld.md")
ls()
head(HelloWorld.md)
head("HelloWorld.md")
install.packages("rmarkdown")
x <- c(4,TRUE)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
z <- rbind(x,y)
x <- list(2,"a","b",TRUE)
x[[2}]
x[[2}]
x[[2]]
x <- 1:4
y <- 2
x + y
x <- c(3,5,1,10,12,6)
x[x<6] == 0
x[x<6] <- 0
x <- c(3,5,1,10,12,6)
x[x %in% 1:5] <- 0
con <- "https://d396qusza40orc.cloudfront.net/rprog/data/quiz1_data.zip"
source(con)
getwd()
setwd("c:/users/mike/downloads")
ls()
getwd()
setwd("c:/users/mike/documents")
source("c:/users/mike/documents/hw1_data.csv")
data <-  source("c:/users/mike/documents/hw1_data.csv")
data <- source("c:/users/mike/documents/hw1_data.csv")
data <- read.csv("c:/users/mike/documents/hw1_data.csv", header = TRUE)
head(data)
help.search("last")
tail(data
tail(data)
tail(data)
data[47]
data[47,:]
data[47,]
data[0,]
mean(data[,1])
mean(data[:,1])
mean(data[:])
mean(data[1])
mean(data)
?mean
mean(data[[1]])
is.nan(data[[1]])
is.na(data[[1]])
x <- is.na(data[[1]])
mean(data[1])
mean(data[[1])
mean(data[[1])
mean(data[[1]])
mean(data[[1]])[u]
mean(data[[1]])[x]
mean(data[[1]][x])
data[x]
data[1][x]
data[1],[x]
data[1,x]
O <- data[1]
head(o)
mean(o)
ls()
ls(O)
mean(O)
hea(O)
head(O)
O[x]
O <- data[[1]]
O[x]
y <- O[x]
x <- !is.na(data[[1]])
z <- O[x]
mean(z)
x <- data($Temp)
x <- data["Temp"]
x <- data$Temp
x <- data$Temp > 90
x <- data$Temp > 90 and data$Ozone > 31
x <- data$Temp > 90 & data$Ozone > 31
sub <- data[x]
sub <- data[x,]
sub
sub <- !is.na(data[x,])
sub
subs <-data[sub
]
subs
subs <-data[sub,]
sub <- data[x]
sub <- data[x,]
sub
View(data)
y <- !is.na(sub$Solar.R)
z <- sub[y]
z <- sub[y,]
mean(z$Solar.R)
Temp <- data$Month = 6
Temp <- data$Month == 6
T <-data$Temp[Temp]
mean(T)
Ozone <- data$Month==5
Ozone <- data[data$Month==5]
Ozone <- data[data$Month==5,]
mean(data[data$Month==5,])
mean(Ozone)
mean(Ozone$Ozone)
Ozone <- data$Ozone[data$Month==5]
Ozone <- data$Ozone[data$Month==5 & !is.na(data$Ozone)]
mean(Ozone)
max(Ozone)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sum,c(2,4,6))
evaluate(median,c(7,40,9))
evaluate(floor,11.1)
telegram <- function(...,start = "START", end = "STOP"){
paste(start,...,end)
}
telegram("Hello")
add_alpha_and_beta <- function(...){
# First we must capture the ellipsis inside of a list
# and then assign the list to a variable. Let's name this
# variable `args`.
args <- list(...)
# We're now going to assume that there are two named arguments within args
# with the names `alpha` and `beta.` We can extract named arguments from
# the args list by using the name of the argument and double brackets. The
# `args` variable is just a regular list after all!
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
# Then we return the sum of alpha and beta.
alpha + beta
}
args(add_alpha_and_beta)
add_alpha_and_beta(1,2)
add_alpha_and_beta()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <-args[["adjective"]]
noun <- args [["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Space","crazy","shuttle")
mad_libs(place = "Space",adjective = "crazy",noun = "shuttle")
?strptime
list.dirs()
list.files()
setwd("R")
list.files()
setwd("ProgrammingAssignment2")
list.files()
source("cachematrix.R")
source("README.md")
read("README.md"")
read("README.md")
View(makeCacheMatrix)
]makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
cachemean(1)
cachemean(makeVector(2))
cachemean(makeVector(2,1,4))
cachemean(makeVector(1))
cachemean(makeVector(4))
cachemean(makeVector(c[1,2,3,4]))
?inverse
rm.ls()
ls.rm()
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(10000000)
mat1 = matrix(r,nrow=1000,ncol=1000)
test(mat1)
makeCacheMatrix(mat1)
i <- makeCacheMatrix(mat1)
i
?inverse
??inverse
set.seed(1110201)
> r = rnorm(10000000)
> mat1 = matrix(r,nrow=1000,ncol=1000)
set.seed(1110201)
> r <- rnorm(10000000)
> mat1 <- matrix(r,nrow=1000,ncol=1000)
set.seed(1110201)
r <- rnorm(10000000)
mat1 <- matrix(r,nrow = 1000,ncol = 1000)
source("cacheMatrix.R")
makeCacheMatrix(mat1)
cacheSolve(makeCacheMatrix(mat1))
test <- cacheSolve(makeCacheMatrix(mat1))
temp = makeCacheMatrix(mat1)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
source('~/R/ProgrammingAssignment2/cachematrix.R')
x <- 6
get <- function() x]
get <- function() x
x$get
get(x)
get()
y(get)
y <- get()
setinverse <- function(inverse) z <<- inverse.gaussian()
setinverse <- function(inverse) z <<- inverse
x$setinverse(z)
set <- function(y) {
# assigns (using "<<-") values y and NULL to objects x & z in a
# different environment
x <<- y
z <<- NULL
}
set(100)
r = rnorm(100)
x <- matrix(r,nrow = 10,ncol = 10)
makeCacheMatrix <- function(x = matrix()) {
z <- NULL # set z to null
set <- function(y) {
# assigns (using "<<-") values y and NULL to objects x & z in a
# different environment
x <<- y
z <<- NULL
}}
t <- makeCacheMatrix(x)
setinverse <- function(inverse) z <<- inverse
setinverse()
source('~/R/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(100),nrow = 10,ncol = 10)
source('~/R/ProgrammingAssignment2/cachematrix.R')
t <- makeCacheMatrix
out <- cacheSolve(t)
source('~/R/ProgrammingAssignment2/cachematrix.R')
out <- cacheSolve(t)
mat <- x
x <- matrix()
t <- makeCacheMatrix(mat])
t <- makeCacheMatrix(mat)
out <- cacheSolve(t)
View(mat)
View(mat)
View(out)
View(out)
View(out)
View(out)
View(mat)
View(mat)
source('~/R/ProgrammingAssignment2/cachematrix.R')
source('~/R/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(rnorm(1000000),nrow = 1000, ncol = 1000)
source('~/R/ProgrammingAssignment2/cachematrix.R')
temp <- make start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
temp <- makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
source('~/R/ProgrammingAssignment2/cachematrix.R')
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
temp <- makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
source('~/R/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5, 2)
?rpois
?dpois
?qpois
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
library(swirl)
swirl()
swirl()
Ls()
s()
ls()
source("http://plants.usda.gov/adv_search.html")
swirl()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
samples(LETTERS)
sample(LETTERS)
sample(0:1,100,replace = TRUE,prop = c(0.3,0.7))
sample(0:1,100,replace = TRUE,prob = c(0.3,0.7))
flips <- sample(0:1,100,replace = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom#
rbinom(1,size = 100,prob = 0.7)
flips2 <- rbinom(100, size = 1,prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd-25)
rnorm(10,mean=100,sd=25)
rpois(5,mean = 10)
?rpois
rpois(5,lambda = 10)
my_pois <- replicate(100,rpois(5,10))
my_pois
mc <- colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$speed)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,main = "My Plot")
plot(cars,main() = "My Plot")
plot(cars,main = "My Plot")
plot(cars,sub = "My Plot Subtitle")
plot(cars,col = 2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
setwd("R")
setwd("~/R/RProgramming_Assignment3")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
