#Heading
##Secondary Heading
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
install.packages("installr")
require(installr)
updateR()
find./package("devtools")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages(KernSnooth)
install.packages(KernSmooth)
install.packages("KernSnooth")
cd
setwd(c:\users\mike\)
setwd("c:\users\mike\")
setwd("c:/users/mike/")
getwd()
ls()
setwd("datasciencecoursera")
source("HelloWorld.md")
ls()
head(HelloWorld.md)
head("HelloWorld.md")
install.packages("rmarkdown")
x <- c(4,TRUE)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
z <- rbind(x,y)
x <- list(2,"a","b",TRUE)
x[[2}]
x[[2}]
x[[2]]
x <- 1:4
y <- 2
x + y
x <- c(3,5,1,10,12,6)
x[x<6] == 0
x[x<6] <- 0
x <- c(3,5,1,10,12,6)
x[x %in% 1:5] <- 0
con <- "https://d396qusza40orc.cloudfront.net/rprog/data/quiz1_data.zip"
source(con)
getwd()
setwd("c:/users/mike/downloads")
ls()
getwd()
setwd("c:/users/mike/documents")
source("c:/users/mike/documents/hw1_data.csv")
data <-  source("c:/users/mike/documents/hw1_data.csv")
data <- source("c:/users/mike/documents/hw1_data.csv")
data <- read.csv("c:/users/mike/documents/hw1_data.csv", header = TRUE)
head(data)
help.search("last")
tail(data
tail(data)
tail(data)
data[47]
data[47,:]
data[47,]
data[0,]
mean(data[,1])
mean(data[:,1])
mean(data[:])
mean(data[1])
mean(data)
?mean
mean(data[[1]])
is.nan(data[[1]])
is.na(data[[1]])
x <- is.na(data[[1]])
mean(data[1])
mean(data[[1])
mean(data[[1])
mean(data[[1]])
mean(data[[1]])[u]
mean(data[[1]])[x]
mean(data[[1]][x])
data[x]
data[1][x]
data[1],[x]
data[1,x]
O <- data[1]
head(o)
mean(o)
ls()
ls(O)
mean(O)
hea(O)
head(O)
O[x]
O <- data[[1]]
O[x]
y <- O[x]
x <- !is.na(data[[1]])
z <- O[x]
mean(z)
x <- data($Temp)
x <- data["Temp"]
x <- data$Temp
x <- data$Temp > 90
x <- data$Temp > 90 and data$Ozone > 31
x <- data$Temp > 90 & data$Ozone > 31
sub <- data[x]
sub <- data[x,]
sub
sub <- !is.na(data[x,])
sub
subs <-data[sub
]
subs
subs <-data[sub,]
sub <- data[x]
sub <- data[x,]
sub
View(data)
y <- !is.na(sub$Solar.R)
z <- sub[y]
z <- sub[y,]
mean(z$Solar.R)
Temp <- data$Month = 6
Temp <- data$Month == 6
T <-data$Temp[Temp]
mean(T)
Ozone <- data$Month==5
Ozone <- data[data$Month==5]
Ozone <- data[data$Month==5,]
mean(data[data$Month==5,])
mean(Ozone)
mean(Ozone$Ozone)
Ozone <- data$Ozone[data$Month==5]
Ozone <- data$Ozone[data$Month==5 & !is.na(data$Ozone)]
mean(Ozone)
max(Ozone)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sum,c(2,4,6))
evaluate(median,c(7,40,9))
evaluate(floor,11.1)
telegram <- function(...,start = "START", end = "STOP"){
paste(start,...,end)
}
telegram("Hello")
add_alpha_and_beta <- function(...){
# First we must capture the ellipsis inside of a list
# and then assign the list to a variable. Let's name this
# variable `args`.
args <- list(...)
# We're now going to assume that there are two named arguments within args
# with the names `alpha` and `beta.` We can extract named arguments from
# the args list by using the name of the argument and double brackets. The
# `args` variable is just a regular list after all!
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
# Then we return the sum of alpha and beta.
alpha + beta
}
args(add_alpha_and_beta)
add_alpha_and_beta(1,2)
add_alpha_and_beta()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <-args[["adjective"]]
noun <- args [["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Space","crazy","shuttle")
mad_libs(place = "Space",adjective = "crazy",noun = "shuttle")
?strptime
list.files()
setwd("R")
list.files()
setwd("RProgramming_Assignments3")
setwd("RProgramming_Assignment3")
list.files()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
> head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
head(outcome[,11])
View(outcome)
View(outcome)
hist(outcome[,11])
hist(as.numeric(outcome[,11]))
min(outcome[,11])
min(as.numberic(outcome[,11]))
min(as.numeric(outcome[,11]))
min(as.numeric(outcome[,11]),na.rm = TRUE)
outcome[outcome[,11]=10.1]
outcome[outcome[,11]==10.1]
outcome[,11] = 10.1
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[,7] == 'AL'
state <- outcome[,7] == 'AL'
state <- outcome[,7] == 'TX'
min <- outcome[state,11]
min(min)
outcome <- outcome[state,11]
source(Best.R)
source("Best.R")
best()
best("TX","heart failure")
state <- outcome[,7] == 'GL'
?if
??if
help.search(if)
?stop
stop("Invalid Outcome")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character") #read outcome data to 'data'
hosp <- data[state,]
outcome <- "spleens"
if (outcome == "heart attack") {
top <- min(hosp[,11])
} else if (outcome == "heart failure") {
top <- min(hosp[,17])
} else if (outcome == "pneumonia") {
top <- min(hosp[,23])
} else {
stop("Invalid Outcome")
}
outcome <- "heart failure"
if (outcome == "heart attack") {
+     top <- min(hosp[,11])
+ } else if (outcome == "heart failure") {
+     top <- min(hosp[,17])
+ } else if (outcome == "pneumonia") {
+     top <- min(hosp[,23])
+ } else {
+     stop("Invalid Outcome")
+ }
if (outcome == "heart attack") {
top <- min(hosp[,11])
} else if (outcome == "heart failure") {
top <- min(hosp[,17])
} else if (outcome == "pneumonia") {
top <- min(hosp[,23])
} else {
stop("Invalid Outcome")
}
hosp[,17 == 10.0]
hosp[,17 == top]
View(data)
View(data)
View(data)
with(hosp,Hospital.Name[hosp[,17] == min(hosp[,17])])
%notin% <- function(x,y) !(x %in% y)
notin <- function(x,y) !(x %in% y)
foo <- letters[1:6]
foo[foo notin(c("a","b","c"))]
'%notin%' <- function(x,y) !(x %in% y)
foo[foo %notin% c("a","b","c")]
subs <- select(State, Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
top <- matrix(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
View(top)
View(top)
state <- "Al"
dim(state)
len(state)
length(state)
length(state[1])
st <- data$State == "Tj"
hosp <- data[st,]
dim(hosp)
dims <- dim(hosp)
dims[1]
dims[1]>0
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character") #read outcome data to 'data'
state <- "Tj"
outcome <- "heart attack"
if (outcome == "heart attack") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
} else if (outcome == "heart failure") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else if (outcome == "pneumonia") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
} else {
stop("Invalid Outcome")
}
st <- data$State == "Tj"
dims <- dim(hosp)
hosp <- data[st,]
dims <- dim(hosp)
dims[1]>0
state <- "Tx"
if (outcome == "heart attack") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
} else if (outcome == "heart failure") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else if (outcome == "pneumonia") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
} else {
stop("Invalid Outcome")
}
# filter by selected state
st <- data$State == state
hosps <- data[st,]
dims <- dim(hosp)
if (dims[1] = 0){    # check selected state is valid
stop("Invalid State")
}
if (dims[1] == 0){    # check selected state is valid
stop("Invalid State")
}
source('~/R/RProgramming_Assignment3/Best.R')
best("Tx","heart attack")
source('~/R/RProgramming_Assignment3/Best.R')
best("Tx","heart attack")
best("TX","heart attack")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character") #read outcome data to 'data'
View(data)
View(data)
state = "TX"
outcome <- "heart attack")
outcome <- "heart attack"
if (outcome == "heart attack") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
} else if (outcome == "heart failure") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else if (outcome == "pneumonia") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
} else {
stop("Invalid Outcome")
}
# filter by selected state
st <- data$State == state
hosp <- data[st,]
dims <- dim(hosp)
if (dims[1] == 0){    # check selected state is valid
stop("Invalid State")
}
best_hospital <- hosp$Hospital.Name[hosp[,3] == min(hosp[,3])
]
?sort
source('~/R/RProgramming_Assignment3/Best.R')
source('~/R/RProgramming_Assignment3/Best.R')
best("TX","heart attack")
source('~/R/RProgramming_Assignment3/Best.R')
best("TX","heart attack")
best("AL","heart attack")
best("ML","heart attack")
best("TX","heart failure")
best("TX","pneumonia")
best("AL","pneumonia")
source('~/R/RProgramming_Assignment3/Best.R')
source('~/R/RProgramming_Assignment3/Best.R')
best("AL","pneumonia")
best("TX","pneumonia")
best("TX","heart failure")
best("MD","heart attack")
best("NY","heart attack")
source('~/R/RProgramming_Assignment3/Best.R')
best("NY","heart attack")
source('~/R/RProgramming_Assignment3/Best.R')
best("NY","heart attack")
source('~/R/RProgramming_Assignment3/Best.R')
best("NY","heart attack")
best("TX#","heart attack")
best("TX","heart attack")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character") #read outcome data to 'data'
if (outcome == "heart attack") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
} else if (outcome == "heart failure") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else if (outcome == "pneumonia") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
} else {
stop("Invalid Outcome")
}
state <- 'TX'
outcome <- 'heart attack'
if (outcome == "heart attack") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
} else if (outcome == "heart failure") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else if (outcome == "pneumonia") {
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
} else {
stop("Invalid Outcome")
}
hosp <- top[top$State == state & top[,3] != 'Not Available']
hosp <- top[top$State == state & top[,3]]
hosp <- top[top$State == state]
View(top)
View(top)
hosp <- top[top$data.State == state]
top <- [data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack]
top <- data.frame(data$State, data$Hospital.Name, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
View(top)
head(top)
head(top$data.State)
hosp <- top[top$data.State == state,]
hosp <- top[top$dataState == state & top[,3] != 'Not Available',]
hosp <- top[top$data.State == state,]
View(hosp)
View(hosp)
best_hospital <- hosp$Hospital.Name[hosp[,3] == min(hosp[,3])]
best_hospital <- hosp$data.Hospital.Name[hosp[,3] == min(hosp[,3])]
best_hospital <- hosp$data.Hospital.Name[hosp[,3] == min(as.numberic(hosp[,3]))]
best_hospital <- hosp$data.Hospital.Name[hosp[,3] == min(as.numeric(hosp[,3]))]
best_hospital <- hosp$data.Hospital.Name[hosp[,3] == min(as.numeric(hosp[,3]),na.rm = TRUE)]
best_hospital <- hosp$data.Hospital.Name[hosp[,3] == min(hosp[,3])]
hosp <- top[top$dataState == state & top[,3] != 'Not Available',]
hosp <- top[top$dataState == state & top$data.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != 'Not Available',]
View(hosp)
View(hosp)
library(dplyr)
top <- data(State, Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
?select.list
find.package("dyplr")
find.package(dyplr)
find.package(dplyr)
install.packages("dplyr")
library(dplyr)
top <- select(data, State, Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
)
View(top)
View(top)
hospitals <- top[top$State==s & top$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != 'Not Available' ,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
hospitals <- top[top$State==state & top$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != 'Not Available' ,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
View(hospitals)
View(hospitals)
View(hospitals)
View(hospitals)
source('~/R/RProgramming_Assignment3/Best.R')
source('~/R/RProgramming_Assignment3/Best.R')
View(hosp)
View(hospitals)
best_hosp <- hospitals$Hospital.Name[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == min[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack]]
View(hospitals)
source('~/R/RProgramming_Assignment3/Best.R')
min[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack]
best_hosp <- hospitals$Hospital.Name[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == min([hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack])]
best_hosp <- hospitals$Hospital.Name[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == min(hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)]
?arrange
ordered <- arrange(best_hosp)
?sort
ordered <- sort(best_hosp)
best_hosptial <- ordered[1]
source('~/R/RProgramming_Assignment3/Best.R')
source('~/R/RProgramming_Assignment3/Best.R')
best("TX","heart failure")
else if (outcome == "heart failure") {
top <- select(data, State, Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospitals <- top[top$State==state & top$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != 'Not Available' ,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")]
best_hosp <- hospitals$Hospital.Name[hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == min(hospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)]
ordered <- sort(best_hosp)
best_hospital <- ordered[1]
source('~/R/RProgramming_Assignment3/Best.R')
